---
type Props = {
	name: string
	required?: boolean
	value: string
	small?: string
	error?: string
	autocomplete?: string
}

const {
	name,
	required = false,
	value,
	small,
	error,
	autocomplete,
} = Astro.props

const showPassword = false
---

<div class="my-6 relative flex flex-col">
	<div class="relative z-0">
		<input
			type="password"
			name={name}
			id={name}
			value={value}
			required={required}
			aria-required={required ? 'true' : 'false'}
			aria-invalid={error ? 'true' : 'false'}
			aria-describedby={error ? `${name}-error` : null}
			autocomplete={autocomplete}
			class="block relative w-full h-14 py-2 pl-4 pr-12 peer
				rounded border leading-5 overflow-x-auto
				bg-transparent text-darkgray border-middlegray
				dark:text-lightgray dark:border-middlegray
				focus:outline-none focus:ring-0 focus:border-2
				focus:border-middle/50 dark:focus:border-middle/50
				invalid:border-red-700 dark:invalid:border-red-400"
			placeholder=""
		/>

		<label
			for={name}
			class="absolute top-4 left-4 px-1 z-10 tracking-[.03125em]
				bg-transparent text-darkgray dark:text-lightgray
				duration-300 transform -translate-y-7 scale-75 origin-[0]
				peer-focus:left-4 peer-focus:text-middle dark:peer-focus:text-middle
				peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0
				peer-focus:scale-75 peer-focus:-translate-y-7
				peer-focus:bg-white dark:peer-focus:bg-darker
				peer-focus:px-1 peer-invalid:text-red-700 dark:peer-invalid:text-red-400"
		>
			<slot />
		</label>

		<div class="absolute top-3 right-3">
			<button
				type="button"
				title={showPassword ? 'Hide password' : 'Show password'}
				class="p-1 rounded-lg
					text-darkgray dark:text-lightgray
					hover:bg-middle/50 focus:bg-middle/50 focus:outline-none"
			>
				<svg
					class={`h-6 w-6 fill-none stroke-current ${
						showPassword ? 'hidden' : 'block'
					}`}
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
					></path>
				</svg>
				<svg
					class={`h-6 w-6 fill-none stroke-current ${
						showPassword ? 'block' : 'hidden'
					}`}
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"
					></path>
				</svg>
			</button>
		</div>
	</div>
	{small && <div class="pt-1 px-4 text-xs tracking-[0.4px]">{small}</div>}
	{
		error && (
			<div
				id={`${name}-error`}
				aria-live="polite"
				class="pt-1 px-4 text-xs tracking-[0.4px] error"
			>
				{error}
			</div>
		)
	}
</div>
